/*
 * generated by Xtext 2.32.0
 */
package org.xtext.example.serializer;

import com.google.inject.Inject;
import java.util.Set;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.serializer.acceptor.SequenceFeeder;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService.ValueTransient;
import org.xtext.example.cv.CvPackage;
import org.xtext.example.cv.Education;
import org.xtext.example.cv.Experience;
import org.xtext.example.cv.Model;
import org.xtext.example.services.CvGrammarAccess;

@SuppressWarnings("all")
public class CvSemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private CvGrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == CvPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case CvPackage.EDUCATION:
				sequence_Education(context, (Education) semanticObject); 
				return; 
			case CvPackage.EXPERIENCE:
				sequence_Experience(context, (Experience) semanticObject); 
				return; 
			case CvPackage.MODEL:
				sequence_Model(context, (Model) semanticObject); 
				return; 
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * <pre>
	 * Contexts:
	 *     Education returns Education
	 *
	 * Constraint:
	 *     (degree=STRING university=STRING year=INT)
	 * </pre>
	 */
	protected void sequence_Education(ISerializationContext context, Education semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, CvPackage.Literals.EDUCATION__DEGREE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, CvPackage.Literals.EDUCATION__DEGREE));
			if (transientValues.isValueTransient(semanticObject, CvPackage.Literals.EDUCATION__UNIVERSITY) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, CvPackage.Literals.EDUCATION__UNIVERSITY));
			if (transientValues.isValueTransient(semanticObject, CvPackage.Literals.EDUCATION__YEAR) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, CvPackage.Literals.EDUCATION__YEAR));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getEducationAccess().getDegreeSTRINGTerminalRuleCall_4_0(), semanticObject.getDegree());
		feeder.accept(grammarAccess.getEducationAccess().getUniversitySTRINGTerminalRuleCall_7_0(), semanticObject.getUniversity());
		feeder.accept(grammarAccess.getEducationAccess().getYearINTTerminalRuleCall_10_0(), semanticObject.getYear());
		feeder.finish();
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Experience returns Experience
	 *
	 * Constraint:
	 *     (position=STRING company=STRING year=INT)
	 * </pre>
	 */
	protected void sequence_Experience(ISerializationContext context, Experience semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, CvPackage.Literals.EXPERIENCE__POSITION) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, CvPackage.Literals.EXPERIENCE__POSITION));
			if (transientValues.isValueTransient(semanticObject, CvPackage.Literals.EXPERIENCE__COMPANY) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, CvPackage.Literals.EXPERIENCE__COMPANY));
			if (transientValues.isValueTransient(semanticObject, CvPackage.Literals.EXPERIENCE__YEAR) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, CvPackage.Literals.EXPERIENCE__YEAR));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getExperienceAccess().getPositionSTRINGTerminalRuleCall_4_0(), semanticObject.getPosition());
		feeder.accept(grammarAccess.getExperienceAccess().getCompanySTRINGTerminalRuleCall_7_0(), semanticObject.getCompany());
		feeder.accept(grammarAccess.getExperienceAccess().getYearINTTerminalRuleCall_10_0(), semanticObject.getYear());
		feeder.finish();
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Model returns Model
	 *
	 * Constraint:
	 *     (
	 *         name=STRING 
	 *         title=STRING 
	 *         about=STRING 
	 *         education+=Education* 
	 *         experience+=Experience* 
	 *         contact=STRING
	 *     )
	 * </pre>
	 */
	protected void sequence_Model(ISerializationContext context, Model semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
}
